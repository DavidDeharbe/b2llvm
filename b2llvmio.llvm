;;; ;;;
;;;
;;; Prototype for a LLVM-IR generator for B
;;;
;;; File: b2llvmio.llvm
;;;
;;; This file contains definitions of LLVM functions used to print the
;;; state of components generated by b2llvm.
;;; It should be assembled and linked with the object files produced by
;;; b2llvm withe option --emit-printer.
;;;
;;; Note: The functions produced ultimately call printf and putchar from
;;; the standard C library.
;;; 
;;; Author: David Deharbe
;;;
	
@.str.i = private constant [3 x i8] c"%i\00"
@.str.s = private constant [3 x i8] c"%s\00"
@.str.true = private constant [5 x i8] c"TRUE\00"
@.str.false = private constant [6 x i8] c"FALSE\00"

declare i32 @putchar(i32)
declare i32 @printf(i8*, ...)

define void @$b2llvm.print.ldelim() {
  %1 = call i32 @putchar(i32 40)
  ret void
}

define void @$b2llvm.print.rdelim() {
  %1 = call i32 @putchar(i32 41)
  ret void
}

define void @$b2llvm.print.space() {
  %1 = call i32 @putchar(i32 32)
  ret void
}

define void @$b2llvm.print.i32(i32 %i) {
  %1 = getelementptr [3 x i8]* @.str.i, i32 0, i32 0
  %2 = call i32 (i8*, ...)* @printf(i8* %1, i32 %i)
  ret void
}

define void @$b2llvm.print.i1(i1 %b) {
  %1 = getelementptr [5 x i8]* @.str.true, i32 0, i32 0
  %2 = getelementptr [6 x i8]* @.str.false, i32 0, i32 0
  %3 = select i1 %b, i8* %1, i8* %2
  %4 = getelementptr [3 x i8]* @.str.s, i32 0, i32 0
  %5 = call i32 (i8*, ...)* @printf(i8* %4, i8* %3)
  ret void
}

