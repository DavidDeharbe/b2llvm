%counter$state$ = type opaque

@.str = private unnamed_addr constant [25 x i8] c"z: zero, i: inc, g: get\0A\00", align 1
@$counter = external global %counter$state$
@.str1 = private unnamed_addr constant [4 x i8] c"%i\0A\00", align 1

define i32 @main() nounwind uwtable ssp {
  %1 = alloca i32, align 4
  %v = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %1
  call void @$init$()
  br label %2

; <label>:2                                       ; preds = %0, %15
  %3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([25 x i8]* @.str, i32 0, i32 0))
  %4 = call i32 @getchar()
  store i32 %4, i32* %c, align 4
  %5 = call i32 @getchar()
  %6 = load i32* %c, align 4
  switch i32 %6, label %12 [
    i32 122, label %7
    i32 105, label %8
    i32 103, label %9
  ]

; <label>:7                                       ; preds = %2
  call void @counter$zero(%counter$state$* @$counter)
  br label %12

; <label>:8                                       ; preds = %2
  call void @counter$inc(%counter$state$* @$counter)
  br label %12

; <label>:9                                       ; preds = %2
  call void @counter$get(%counter$state$* @$counter, i32* %v)
  %10 = load i32* %v, align 4
  %11 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 %10)
  br label %12

; <label>:12                                      ; preds = %2, %9, %8, %7
  br label %2
                                                  ; No predecessors!
  %14 = load i32* %1
  ret i32 %14
}

declare void @$init$()

declare i32 @printf(i8*, ...)

declare i32 @getchar()

declare void @counter$zero(%counter$state$*)

declare void @counter$inc(%counter$state$*)

declare void @counter$get(%counter$state$*,i32*)

